{"version":3,"sources":["views/Pool/index.tsx","components/Loader/Dots.tsx","utils/currencyId.ts","hooks/useTotalSupply.ts","components/PositionCard/index.tsx"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","variant","scale","as","Link","to","style","width","startIcon","Dots","span","currencyId","currency","ETHER","Token","Error","useTotalSupply","token","contract","useTokenContract","totalSupply","useSingleCallResult","result","TokenAmount","toString","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","currency0","token0","unwrappedToken","currency1","token1","useState","showMore","setShowMore","userPoolBalance","useTokenBalance","totalPoolTokens","poolTokenPercentage","JSBI","greaterThanOrEqual","raw","Percent","getLiquidityValue","token0Deposited","token1Deposited","BigInt","gap","bold","onClick","margin","size","small","symbol","toSignificant","toFixed","asset","ml","fontSize","role","FullPositionCard","props","borderRadius","justifyContent","p","padding","BIG_INT_ZERO"],"mappings":"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","file":"static/js/36.e30b9a19.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nconst Body = styled(CardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\n\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n    </Page>\n  )\n}\n","import styled from 'styled-components'\n\nconst Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport default Dots\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n"],"sourceRoot":""}