{"version":3,"sources":["views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/ManageCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/styles.ts","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/utils.ts","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","../node_modules/lodash/orderBy.js","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts"],"names":["PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","image","thumbnail","fontSize","collectionName","name","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","collectionAddress","tokenId","activeIndex","onItemClick","index","symbol","BNB","FetchStatus","SUCCESS","ConnectWalletButton","my","BASE_URL","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","currentAskPrice","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","useEffect","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","a","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","value","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","RoundedImage","Image","Container","Flex","CollectionLink","primary","mediaQueries","lg","MainNFTCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","description","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","Box","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","maxWidth","ScrollableContainer","Divider","div","CollectibleRowContainer","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","nft","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","map","ManageCard","bunnyId","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","attributes","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","length","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","PropertiesCard","properties","property","traitType","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","chainId","useActiveWeb3React","getBscScanLink","SwiperCircle","isActive","secondary","textDisabled","StyledSwiper","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","allPancakeBunnyNfts","useAllPancakeBunnyNfts","nftsToShow","slidesPerView","maxPageIndex","isAddress","pancakeBunniesAddress","reduce","nftArray","current","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","keys","slideTo","goToSlide","slideNext","OwnersTableRow","ButtonContainer","Row","ownNft","currentSeller","toLowerCase","pl","formatNumber","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","StyledSortButton","button","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","size","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","TableHeading","PageButtons","Arrow","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","page","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","TwoColumnsContainer","IndividualNFTPage","useParams","attributesDistribution","setAttributesDistribution","setNothingForSaleBunny","allBunnies","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","isPBCollection","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","getNftsFromCollectionApi","apiResponse","fetchTokens","data","collection","displayType","fetchBasicBunnyData","sortedNfts","useMemo","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","Object","values","acc","cur","toFixed","getBunnyIdRarity","Page","metadataUrl","currentValue","arrayMap","require","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","isArray","module","exports","iteratees","orders","iteratee","result","key","object","other","array","comparer","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","baseOrderBy","guard","setAllPancakeBunnyNfts","bunnyIds","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","meta","updatedAt","fetchPancakeBunnies"],"mappings":"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","file":"static/js/25.a471a44a.chunk.js","sourcesContent":["import { TokenMarketData, Image } from 'state/nftMarket/types'\n\nexport enum PaymentCurrency {\n  BNB,\n  WBNB,\n}\n\nexport enum BuyingStage {\n  REVIEW,\n  APPROVE_AND_CONFIRM,\n  CONFIRM,\n  TX_CONFIRMED,\n}\n\nexport interface BuyNFT {\n  collection: {\n    address: string\n    name: string\n  }\n  token: TokenMarketData\n  name: string\n  image: Image\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { BuyingStage } from './types'\n\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `color: ${theme.colors.textSubtle}`\n        : null};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `fill: ${theme.colors.textSubtle}`\n        : null};\n  }\n`\n\nexport const BorderedBox = styled(Grid)`\n  margin: 16px 0;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 8px;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n  isLoading?: boolean\n  isInsufficient?: boolean\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (isLoading) {\n    return (\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\n        <Skeleton width=\"86px\" height=\"20px\" />\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\n      <Flex justifyContent=\"flex-end\">\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`}</Text>\n      </Flex>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\nimport { FetchStatus } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_URL } from 'config'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { BorderedBox, BnbAmountCell } from './styles'\nimport { PaymentCurrency } from './types'\n\ninterface ReviewStageProps {\n  nftToBuy: NftToken\n  paymentCurrency: PaymentCurrency\n  setPaymentCurrency: (index: number) => void\n  nftPrice: number\n  walletBalance: number\n  walletFetchStatus: FetchStatus\n  notEnoughBnbForPurchase: boolean\n  continueToNextStage: () => void\n}\n\nconst ReviewStage: React.FC<ReviewStageProps> = ({\n  nftToBuy,\n  paymentCurrency,\n  setPaymentCurrency,\n  nftPrice,\n  walletBalance,\n  walletFetchStatus,\n  notEnoughBnbForPurchase,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  return (\n    <>\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\n        <Flex>\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {nftToBuy.collectionName}\n            </Text>\n            <Text bold>{nftToBuy.name}</Text>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\n                {t('Token ID:')}\n              </Text>\n              <Button\n                as={Link}\n                scale=\"xs\"\n                px=\"0px\"\n                pt=\"2px\"\n                external\n                variant=\"text\"\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\n              >\n                {nftToBuy.tokenId}\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n        <BorderedBox>\n          <Text small color=\"textSubtle\">\n            {t('Pay with')}\n          </Text>\n          <ButtonMenu\n            activeIndex={paymentCurrency}\n            onItemClick={(index) => setPaymentCurrency(index)}\n            scale=\"sm\"\n            variant=\"subtle\"\n          >\n            <ButtonMenuItem>BNB</ButtonMenuItem>\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\n          </ButtonMenu>\n          <Text small color=\"textSubtle\">\n            {t('Total payment')}\n          </Text>\n          <BnbAmountCell bnbAmount={nftPrice} />\n          <Text small color=\"textSubtle\">\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\n          </Text>\n          {!account ? (\n            <Flex justifySelf=\"flex-end\">\n              <ConnectWalletButton scale=\"sm\" />\n            </Flex>\n          ) : (\n            <BnbAmountCell\n              bnbAmount={walletBalance}\n              isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\n              isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\n            />\n          )}\n        </BorderedBox>\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\n          <Message p=\"8px\" variant=\"danger\">\n            <Text>\n              {t('Not enough %symbol% to purchase this NFT', {\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\n              })}\n            </Text>\n          </Message>\n        )}\n        <Flex alignItems=\"center\">\n          <Text my=\"16px\" mr=\"4px\">\n            {t('Convert between BNB and WBNB for free')}:\n          </Text>\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${BASE_URL}/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c`}\n          >\n            {t('Convert')}\n          </Button>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\n        <Button\n          onClick={continueToNextStage}\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\n          mb=\"8px\"\n        >\n          {t('Checkout')}\n        </Button>\n        <Button\n          as={Link}\n          external\n          style={{ width: '100%' }}\n          href={`${BASE_URL}/swap?outputCurrency=BNB`}\n          variant=\"secondary\"\n        >\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ReviewStage\n","import React, { useEffect, useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  useEffect(() => {\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\n      setPaymentCurrency(PaymentCurrency.WBNB)\n      setIsPaymentCurrentInitialized(true)\n    }\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={modalTitles[stage]}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Flex, Box, Card, CardBody, Text, Button, Image, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport BuyModal from '../../components/BuySellModals/BuyModal'\nimport SellModal from '../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  height: max-content;\n  border-radius: ${({ theme }) => theme.radii.default};\n  overflow: hidden;\n  & > img {\n    object-fit: contain;\n  }\n`\n\nconst Container = styled(Flex)`\n  gap: 24px;\n`\n\nconst CollectionLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.primary};\n  display: block;\n  font-weight: 600;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: 50px;\n  }\n`\n\ninterface MainNFTCardProps {\n  cheapestNft: NftToken\n  cheapestNftFromOtherSellers?: NftToken\n  nothingForSaleBunny?: NftToken\n}\n\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ cheapestNft, cheapestNftFromOtherSellers, nothingForSaleBunny }) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\n\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\n\n  const actionButton = onlyOwnNftsOnSale ? (\n    <Button\n      variant=\"danger\"\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentAdjustPriceModal}\n    >\n      {t('Adjust Sale Price')}\n    </Button>\n  ) : (\n    <Button\n      disabled={onlyOwnNftsOnSale}\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentBuyModal}\n    >\n      {t('Buy')}\n    </Button>\n  )\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\n                {nftToDisplay.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nftToDisplay.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\n                <>\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                    {t('Lowest price')}\n                  </Text>\n                  <Flex alignItems=\"center\" mt=\"8px\">\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\n                      {nftToDisplay.marketData.currentAskPrice}\n                    </Text>\n                    {bnbBusdPrice ? (\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    ) : (\n                      <Skeleton width=\"64px\" />\n                    )}\n                  </Flex>\n                </>\n              )}\n              {hasListings && actionButton}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nftToDisplay.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainNFTCard\n","import React, { useState } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 720px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 710px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n`\n\nconst FullWidthCard = styled(Card)`\n  width: 100%;\n`\n\ninterface ExpandableCardProps {\n  icon: React.ReactNode\n  title: string\n  content: React.ReactNode\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\n  const [expanded, setExpanded] = useState(true)\n  const { theme } = useTheme()\n  return (\n    <FullWidthCard>\n      <Grid\n        gridTemplateColumns=\"1fr 8fr 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        {icon}\n        <Text bold>{title}</Text>\n        <IconButton\n          onClick={() => {\n            setExpanded((prev) => !prev)\n          }}\n          variant=\"text\"\n          maxWidth=\"32px\"\n        >\n          {expanded ? (\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          ) : (\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          )}\n        </IconButton>\n      </Grid>\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\n    </FullWidthCard>\n  )\n}\n\nexport default ExpandableCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  Image,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from './ExpandableCard'\nimport useFetchUserNfts from '../../Profile/hooks/useFetchUserNfts'\nimport SellModal from '../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../components/ProfileNftModal'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\nconst ScrollableContainer = styled(Box)`\n  overflow-y: auto;\n  max-height: 224px;\n`\n\nconst Divider = styled.div`\n  margin: 16px 20px;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst CollectibleRowContainer = styled(Grid)`\n  &:hover {\n    opacity: 0.5;\n    cursor: pointer;\n  }\n`\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n  lowestPrice: string\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <RoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {lowestPrice && (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Lowest price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{lowestPrice}</Text>\n            </Flex>\n          </>\n        )}\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectiblesByLocationProps {\n  location: NftLocation\n  nfts: NftToken[]\n  lowestPrice: string\n}\n\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[location]}>\n          {t(location)}\n        </Text>\n      </Grid>\n      <ScrollableContainer>\n        {nfts.map((nft) => (\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\n        ))}\n      </ScrollableContainer>\n    </Flex>\n  )\n}\n\ninterface ManageCardProps {\n  bunnyId: string\n  lowestPrice?: string\n}\n\nconst ManageCard: React.FC<ManageCardProps> = ({ bunnyId, lowestPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts(account)\n\n  const bunniesInWallet = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\n  )\n  const bunniesForSale = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\n  )\n  const profilePicBunny = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\n  )\n\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\n  const useHasNoBunnies =\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {useHasNoBunnies && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have any of this item.')}\n        </Text>\n      )}\n      {account && loading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {bunniesForSale.length > 0 && (\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\n      )}\n      {bunniesInWallet.length > 0 && (\n        <>\n          {bunniesForSale.length > 0 && <Divider />}\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\n        </>\n      )}\n      {profilePicBunny.length > 0 && (\n        <>\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\n        </>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManageCard\n","import React from 'react'\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftAttribute } from 'state/nftMarket/types'\nimport ExpandableCard from './ExpandableCard'\n\ninterface PropertiesCardProps {\n  properties: NftAttribute[]\n  rarity: { [key: string]: string }\n}\n\n// Map of known traits to human-readable text\nconst KNOWN_TRAITS_TEXT = {\n  bunnyId: 'Bunny ID',\n}\n\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: string }> = ({\n  title,\n  value,\n  rarity,\n}) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n        {KNOWN_TRAITS_TEXT[title] ?? title}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\n          {value}\n        </Text>\n        <Text small color=\"textSubtle\">\n          ({rarity}%)\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\n  const { t } = useTranslation()\n  const content = (\n    <Box p=\"24px\">\n      {properties.map((property) => (\n        <SingleProperty\n          key={property.traitType}\n          title={property.traitType}\n          value={property.value}\n          rarity={rarity[property.traitType]}\n        />\n      ))}\n    </Box>\n  )\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default PropertiesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ExpandableCard from './ExpandableCard'\n\ninterface DetailsCardProps {\n  contractAddress: string\n  ipfsJson: string\n}\n\nconst LongTextContainer = styled(Text)`\n  max-width: 120px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const content = (\n    <Box p=\"24px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n          {t('Contract address')}\n        </Text>\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\n        </Link>\n      </Flex>\n      {ipfsJson && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            IPFS JSON\n          </Text>\n          <Link external href={ipfsJson}>\n            <LongTextContainer bold>{ipfsJson}</LongTextContainer>\n          </Link>\n        </Flex>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default DetailsCard\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport SwiperCore from 'swiper'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\n\nimport 'swiper/swiper-bundle.css'\n\nconst INITIAL_SLIDE = 4\n\nconst SwiperCircle = styled.div<{ isActive }>`\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\n  width: 12px;\n  height: 12px;\n  margin-right: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n`\n\nconst StyledSwiper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    .swiper-wrapper {\n      max-height: 390px;\n    }\n  }\n`\n\ninterface MoreFromThisCollectionProps {\n  collectionAddress: string\n  currentTokenName?: string\n  title?: string\n}\n\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\n  collectionAddress,\n  currentTokenName = '',\n  title = 'More from this collection',\n}) => {\n  const { t } = useTranslation()\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\n  const [activeIndex, setActiveIndex] = useState(1)\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\n\n  let nftsToShow = allPancakeBunnyNfts ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName) : []\n\n  if (nftsToShow.length === 0) {\n    return null\n  }\n\n  let slidesPerView = 4\n  let maxPageIndex = 3\n\n  if (isMd) {\n    slidesPerView = 2\n    maxPageIndex = 6\n  }\n\n  if (isLg) {\n    slidesPerView = 3\n    maxPageIndex = 4\n  }\n\n  if (isAddress(collectionAddress) === pancakeBunniesAddress) {\n    // PancakeBunnies should display 1 card per bunny id\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\n      const bunnyId = current.attributes[0].value\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\n        nftArray.push(current)\n      }\n      return nftArray\n    }, [])\n  }\n  nftsToShow = nftsToShow.slice(0, 12)\n\n  const nextSlide = () => {\n    if (activeIndex < maxPageIndex - 1) {\n      setActiveIndex(activeIndex + 1)\n      swiperRef.slideNext()\n    }\n  }\n\n  const previousSlide = () => {\n    if (activeIndex > 0) {\n      setActiveIndex(activeIndex - 1)\n      swiperRef.slidePrev()\n    }\n  }\n\n  const goToSlide = (index: number) => {\n    setActiveIndex(index / slidesPerView)\n    swiperRef.slideTo(index)\n  }\n\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\n  }\n\n  return (\n    <Box pt=\"56px\" mb=\"52px\">\n      {title && (\n        <Text bold mb=\"24px\">\n          {t(title)}\n        </Text>\n      )}\n      {isMobile ? (\n        <StyledSwiper>\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        </StyledSwiper>\n      ) : (\n        <StyledSwiper>\n          <Swiper\n            onSwiper={setSwiperRef}\n            onActiveIndexChange={updateActiveIndex}\n            spaceBetween={16}\n            slidesPerView={slidesPerView}\n            slidesPerGroup={slidesPerView}\n            initialSlide={INITIAL_SLIDE}\n          >\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\n            <IconButton variant=\"text\" onClick={previousSlide}>\n              <ArrowBackIcon />\n            </IconButton>\n            {[...Array(maxPageIndex).keys()].map((index) => (\n              <SwiperCircle\n                key={index}\n                onClick={() => goToSlide(index * slidesPerView)}\n                isActive={activeIndex === index}\n              />\n            ))}\n            <IconButton variant=\"text\" onClick={nextSlide}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </Flex>\n        </StyledSwiper>\n      )}\n    </Box>\n  )\n}\n\nexport default MoreFromThisCollection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Price } from '@pancakeswap/sdk'\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\n\nconst OwnersTableRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  align-itmes: center;\n  & > div {\n    padding-bottom: 16px;\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  }\n`\n\nconst ButtonContainer = styled(Box)`\n  text-align: right;\n  padding-right: 24px;\n`\n\ninterface RowProps {\n  t: ContextApi['t']\n  nft: NftToken\n  bnbBusdPrice: Price\n  account: string\n}\n\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\n\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\n\n  return (\n    <>\n      <Box pl=\"24px\">\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n        </Flex>\n        {bnbBusdPrice ? (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n          </Text>\n        ) : (\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n        )}\n      </Box>\n      <Box>\n        <Flex width=\"max-content\" alignItems=\"center\">\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\n        </Flex>\n      </Box>\n      <ButtonContainer>\n        {ownNft ? (\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\n            {t('Edit')}\n          </Button>\n        ) : (\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\n            {t('Buy')}\n          </Button>\n        )}\n      </ButtonContainer>\n    </>\n  )\n}\n\ninterface ForSaleTableRowsProps {\n  nftsForSale: NftToken[]\n}\n\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n  return (\n    <OwnersTableRow>\n      {nftsForSale.map((nft) => (\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\n      ))}\n    </OwnersTableRow>\n  )\n}\n\nexport default ForSaleTableRow\n","import styled from 'styled-components'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n","import { Spinner, Text } from '@pancakeswap/uikit'\nimport React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst countdownAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0px;\n  }\n  to {\n    stroke-dashoffset: 113px;\n  }\n`\n\nconst CountdownContainer = styled.div`\n  position: relative;\n  margin: auto;\n  height: 40px;\n  width: 40px;\n  text-align: center;\n\n  & svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 40px;\n    height: 40px;\n    transform: rotateY(-180deg) rotateZ(-90deg);\n\n    & circle {\n      stroke-dasharray: 113px;\n      stroke-dashoffset: 0px;\n      stroke-linecap: round;\n      stroke-width: 2px;\n      stroke: ${({ theme }) => theme.colors.primaryBright};\n      fill: none;\n      animation: ${countdownAnimation} 10s linear infinite forwards;\n    }\n  }\n`\n\ninterface CountdownCircleProps {\n  secondsRemaining: number\n  isUpdating: boolean\n}\n\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\n  if (secondsRemaining < 1 || isUpdating) {\n    return <Spinner size={42} />\n  }\n  return (\n    <CountdownContainer>\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\n        {secondsRemaining}\n      </Text>\n      <svg>\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\n      </svg>\n    </CountdownContainer>\n  )\n}\n\nexport default CountdownCircle\n","import React, { useEffect, useState } from 'react'\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\nimport { useLoadingState } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CountdownCircle from './CountdownCircle'\n\nconst UpdateIndicator = () => {\n  const { t } = useTranslation()\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\n    placement: 'auto',\n  })\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSecondsRemaining((prev) => prev - 1)\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isFetchingMorePancakeBunnies) {\n      setSecondsRemaining(10)\n    }\n  }, [isFetchingMorePancakeBunnies])\n\n  return (\n    <Flex justifyContent=\"center\" ref={targetRef}>\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\n      {tooltipVisible && tooltip}\n    </Flex>\n  )\n}\n\nexport default UpdateIndicator\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Card,\n  Grid,\n  SellIcon,\n  Text,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Button,\n  Spinner,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport ForSaleTableRows from './ForSaleTableRows'\nimport { StyledSortButton } from './styles'\nimport UpdateIndicator from './UpdateIndicator'\n\nconst ITEMS_PER_PAGE_DESKTOP = 10\nconst ITEMS_PER_PAGE_MOBILE = 5\n\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\n  width: 100%;\n  & > div:first-child {\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaQueries.md} {\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\n    }\n  }\n`\n\nconst TableHeading = styled(Grid)`\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nconst Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\ninterface ForSaleTableCardProps {\n  nftsForSale: NftToken[]\n  bunnyId: string\n  totalForSale: number\n  priceSort: 'asc' | 'desc'\n  isFetchingMoreNfts: boolean\n  togglePriceSort: () => void\n  loadMore: (orderDirection: 'asc' | 'desc') => void\n}\n\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\n  nftsForSale,\n  bunnyId,\n  totalForSale,\n  loadMore,\n  isFetchingMoreNfts,\n  priceSort,\n  togglePriceSort,\n}) => {\n  const [page, setPage] = useState(1)\n  const { isMobile } = useMatchBreakpoints()\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  useEffect(() => {\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\n    // Same for reversing sorting direction\n    setPage(1)\n  }, [bunnyId, priceSort])\n\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\n  if (needsExtraPage) {\n    maxPage += 1\n  }\n\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\n  const switchPage = (pageNumber: number) => {\n    setPage(pageNumber)\n  }\n\n  const loadMoreHandler = () => {\n    loadMore(priceSort)\n  }\n\n  const loadMoreButton = isFetchingMoreNfts ? (\n    <Flex width=\"96px\" justifyContent=\"center\">\n      <Spinner size={32} />\n    </Flex>\n  ) : (\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\n      {t('Load more')}\n    </Button>\n  )\n\n  return (\n    <StyledCard hasManyPages={maxPage > 1}>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr 48px\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\n        <UpdateIndicator />\n      </Grid>\n      {nftsOnCurrentPage.length > 0 ? (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\n              <Flex alignItems=\"center\">\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                  {t('Price')}\n                </Text>\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\n              </Flex>\n            </StyledSortButton>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  switchPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              {page === maxPage ? (\n                loadMoreButton\n              ) : (\n                <Arrow\n                  onClick={() => {\n                    switchPage(page === maxPage ? page : page + 1)\n                  }}\n                >\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n                </Arrow>\n              )}\n            </PageButtons>\n          </Flex>\n        </>\n      ) : (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('No items for sale')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ForSaleTableCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\nimport MainNFTCard from './MainNFTCard'\nimport ManageCard from './ManageCard'\nimport PropertiesCard from './PropertiesCard'\nimport DetailsCard from './DetailsCard'\nimport MoreFromThisCollection from './MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../types'\n\nconst TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nconst IndividualNFTPage = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { account } = useWeb3React()\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n  const [attributesDistribution, setAttributesDistribution] = useState<{ [key: string]: number }>(null)\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(tokenId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\n    useFetchByBunnyIdAndUpdate(tokenId)\n  const { fastRefresh } = useRefresh()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  // useUpdateNftInfo(collectionAddress)\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fastRefresh])\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setAttributesDistribution(apiResponse.attributesDistribution)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setAttributesDistribution])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[tokenId].name,\n        name: data[tokenId].name,\n        description: data[tokenId].description,\n        collectionName: data[tokenId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[tokenId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: tokenId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (isPBCollection && !cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, tokenId, isPBCollection])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdRarity = () => {\n    if (attributesDistribution) {\n      const total = Object.values(attributesDistribution).reduce((acc, cur) => {\n        return acc + cur\n      }, 0)\n      return ((attributesDistribution[tokenId] / total) * 100).toFixed(2)\n    }\n    return null\n  }\n\n  const properties = isPBCollection ? cheapestBunny?.attributes || nothingForSaleBunny?.attributes : []\n\n  const propertyRarity = isPBCollection ? { bunnyId: getBunnyIdRarity() } : {}\n\n  return (\n    <Page>\n      <MainNFTCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageCard bunnyId={tokenId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={cheapestBunny?.marketData?.metadataUrl} />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={tokenId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={collectionAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n","type sortBuilder = {\n  priceSort: string\n}\n\nexport const sortNFTsByPriceBuilder =\n  ({ priceSort }: sortBuilder) =>\n  (nftA, nftB) => {\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\n\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\n  }\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n"],"sourceRoot":""}