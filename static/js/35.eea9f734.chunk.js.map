{"version":3,"sources":["components/UnsupportedCurrencyFooter.tsx","state/mint/hooks.ts","views/AddLiquidity/ConfirmAddModalBottom.tsx","views/AddLiquidity/PoolPriceBar.tsx","views/AddLiquidity/index.tsx","components/Loader/Dots.tsx","utils/currencyId.ts","hooks/useTotalSupply.ts","components/PositionCard/index.tsx"],"names":["DetailsFooter","styled","div","theme","colors","text","invertedContrast","UnsupportedModal","currencies","onDismiss","chainId","useActiveWeb3React","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","title","maxWidth","gap","token","Object","keys","includes","address","align","size","symbol","external","small","color","href","getBscScanLink","concat","UnsupportedCurrencyFooter","useModal","onPresentModal","variant","onClick","ZERO","JSBI","BigInt","useMintState","useSelector","state","mint","ConfirmAddModalBottom","noLiquidity","price","parsedAmounts","poolTokenPercentage","onAdd","t","useTranslation","Row","asset","Field","CURRENCY_A","style","marginRight","toSignificant","CURRENCY_B","justifyContent","invert","mt","PoolPriceBar","justify","fontSize","pt","assetA","assetB","lessThan","ONE_BIPS","toFixed","AddLiquidity","match","params","currencyIdA","currencyIdB","history","account","library","dispatch","useDispatch","gasPrice","useGasPrice","currencyA","useCurrency","currencyB","useEffect","resetMintState","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","expertMode","useIsExpertMode","independentField","typedValue","otherTypedValue","error","dependentField","useMemo","undefined","usePair","pairState","pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","equal","raw","balances","useCurrencyBalances","currencyBalances","independentAmount","tryParseAmount","dependentAmount","wrappedIndependentAmount","wrappedCurrencyAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ETHER","CurrencyAmount","ether","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","Percent","add","INVALID","useDerivedMintInfo","onFieldAInput","useCallback","typeInput","field","onFieldBInput","useMintActionHandlers","isValid","useState","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","useApproveCallback","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","a","router","getRouterContract","parsedAmountA","parsedAmountB","calculateSlippageAmount","amountsMin","tokenBIsETH","estimate","estimateGas","addLiquidityETH","method","args","toString","toHexString","value","BigNumber","from","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","summary","hash","catch","err","code","console","modalHeader","alignItems","currency0","currency1","textAlign","my","slippage","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","push","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","TransactionConfirmationModal","customOnDismiss","content","topContent","bottomContent","currencyToAdd","onPresentAddLiquidityModal","Page","App","subtitle","helper","backTo","Column","bold","mb","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","width","padding","borderRadius","disabled","ApprovalState","NOT_APPROVED","PENDING","APPROVED","Dots","ConnectWalletButton","minWidth","marginTop","showUnwrapped","span","Token","Error","contract","useTokenContract","useSingleCallResult","result","TokenAmount","FixedHeightRow","RowBetween","MinimalPositionCard","token0","unwrappedToken","token1","showMore","setShowMore","userPoolBalance","useTokenBalance","totalPoolTokens","greaterThanOrEqual","getLiquidityValue","token0Deposited","token1Deposited","greaterThan","margin","ml","role","FullPositionCard","props","p","flexDirection","BIG_INT_ZERO","as","Link","to","startIcon"],"mappings":"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","file":"static/js/35.eea9f734.chunk.js","sourcesContent":["import React from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<Props> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title=\"Unsupported Assets\" maxWidth=\"420px\" onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link external small color=\"primaryDark\" href={getBscScanLink(token.address, 'address', chainId)}>\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            Some assets are not available through this interface because they may not work well with our smart contract\n            or we are unable to allow trading for legal reasons.\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        Read more about unsupported assets\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { wrappedCurrency, wrappedCurrencyAmount } from 'utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId),\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    }\n    return undefined\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Invalid pair')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { Field } from '../../state/mint/actions'\n\nfunction ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  currencies,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd,\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  currencies: { [field in Field]?: Currency }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Rates')}</Text>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n            currencies[Field.CURRENCY_B]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n            currencies[Field.CURRENCY_A]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Share of Pool')}:</Text>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <Button onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n      </Button>\n    </>\n  )\n}\n\nexport default ConfirmAddModalBottom\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn } from '../../components/Layout/Column'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { ONE_BIPS } from '../../config/constants'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from '../../state'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { DoubleCurrencyLogo } from '../../components/Logo'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport { PairState } from '../../hooks/usePairs'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field, resetMintState } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom'\nimport { currencyId } from '../../utils/currencyId'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n  const gasPrice = useGasPrice()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  useEffect(() => {\n    if (!currencyIdA && !currencyIdB) {\n      dispatch(resetMintState())\n    }\n  }, [dispatch, currencyIdA, currencyIdB])\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\n  )\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n          gasPrice,\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        }),\n      )\n      .catch((err) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (err?.code !== 4001) {\n          console.error(err)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"48px\" marginRight=\"10px\">\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n        </Text>\n        <DoubleCurrencyLogo\n          currency0={currencies[Field.CURRENCY_A]}\n          currency1={currencies[Field.CURRENCY_B]}\n          size={30}\n        />\n      </Flex>\n    ) : (\n      <AutoColumn>\n        <Flex alignItems=\"center\">\n          <Text fontSize=\"48px\" marginRight=\"10px\">\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </Flex>\n        <Row>\n          <Text fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </Text>\n        </Row>\n        <Text small textAlign=\"left\" my=\"24px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else if (currencyIdB) {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <TransactionConfirmationModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          title={t('Add Liquidity')}\n          subtitle={t('Add liquidity to receive LP tokens')}\n          helper={t(\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\n          )}\n          backTo=\"/pool\"\n        />\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <Message variant=\"warning\">\n                  <div>\n                    <Text bold mb=\"8px\">\n                      {t('You are the first liquidity provider.')}\n                    </Text>\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                  </div>\n                </Message>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <AddIcon width=\"16px\" />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <Text fontSize=\"14px\">\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                    </Text>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <Button disabled mb=\"4px\">\n                {t('Unsupported Asset')}\n              </Button>\n            ) : !account ? (\n              <ConnectWalletButton />\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    if (expertMode) {\n                      onAdd()\n                    } else {\n                      onPresentAddLiquidityModal()\n                    }\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                >\n                  {error ?? t('Supply')}\n                </Button>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </CardBody>\n      </AppBody>\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import styled from 'styled-components'\n\nconst Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport default Dots\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n"],"sourceRoot":""}