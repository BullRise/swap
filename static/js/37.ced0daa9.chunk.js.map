{"version":3,"sources":["views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/index.tsx","views/Nft/market/components/GridPlaceholder.tsx","components/Select/Select.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts"],"names":["CollectionNfts","collection","sortBy","address","checksummedAddress","getAddress","dispatch","useAppDispatch","isPBCollection","pancakeBunniesAddress","useEffect","fetchNftsFromCollections","nfts","useNftsFromCollection","allPancakeBunnyNfts","useAllPancakeBunnyNfts","currentNfts","GridPlaceholder","nftsToShow","orderBy","nft","meta","marketData","Number","gridGap","gridTemplateColumns","alignItems","map","tokenId","collectionName","Items","collectionAddress","useParams","useState","setSortBy","t","useTranslation","useGetCollection","sortByItems","label","value","fetchCollection","Header","Page","justifyContent","mb","minWidth","fontSize","textTransform","color","fontWeight","Select","options","onOptionChange","newOption","GridPlaceholderItem","props","height","width","numItems","times","itemKey","DropDownHeader","styled","div","theme","shadows","inset","colors","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","Box","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","dropdownRef","useRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","handleClickOutside","document","addEventListener","removeEventListener","onClick","ref","option","index","selectedIndex","setAllPancakeBunnyNfts","a","getNftsFromCollectionApi","data","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","name","description","image","attributes","traitType","displayType","currentAskPrice","updatedAt","fetchPancakeBunnies"],"mappings":"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","file":"static/js/37.ced0daa9.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { Grid } from '@pancakeswap/uikit'\nimport { getAddress } from '@ethersproject/address'\nimport orderBy from 'lodash/orderBy'\nimport { useAppDispatch } from 'state'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { Collection } from 'state/nftMarket/types'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\n\ninterface CollectionNftsProps {\n  collection: Collection\n  sortBy?: string\n}\n\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\n  const { address } = collection\n  const checksummedAddress = getAddress(address)\n  const dispatch = useAppDispatch()\n\n  const isPBCollection = address === pancakeBunniesAddress\n\n  useEffect(() => {\n    dispatch(fetchNftsFromCollections(checksummedAddress))\n  }, [checksummedAddress, dispatch])\n\n  const nfts = useNftsFromCollection(checksummedAddress)\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\n\n  const currentNfts = isPBCollection ? allPancakeBunnyNfts : nfts\n\n  if (!currentNfts) {\n    return <GridPlaceholder />\n  }\n\n  const nftsToShow = orderBy(\n    currentNfts,\n    (nft) => (isPBCollection ? nft.meta[sortBy] : nft.marketData ? Number(nft.marketData[sortBy]) : 0),\n    [sortBy === 'currentAskPrice' ? 'asc' : 'desc'],\n  )\n\n  return (\n    <Grid\n      gridGap=\"16px\"\n      gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n      alignItems=\"start\"\n    >\n      {nftsToShow.map((nft) => {\n        return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\n      })}\n    </Grid>\n  )\n}\n\nexport default CollectionNfts\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Page from 'components/Layout/Page'\nimport CollectionNfts from './CollectionNfts'\nimport Header from '../Header'\n\nconst Items = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const [sortBy, setSortBy] = useState('updatedAt')\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n  const { address } = collection || {}\n\n  const sortByItems = [\n    { label: t('Recently listed'), value: 'updatedAt' },\n    { label: t('Lowest price'), value: 'currentAskPrice' },\n  ]\n\n  const handleChange = (newOption: OptionProps) => {\n    setSortBy(newOption.value)\n  }\n\n  useEffect(() => {\n    if (address) {\n      dispatch(fetchCollection(address))\n    }\n  }, [address, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Page>\n        <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\n          <Box minWidth=\"165px\">\n            <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\n              {t('Sort By')}\n            </Text>\n            <Select options={sortByItems} onOptionChange={handleChange} />\n          </Box>\n        </Flex>\n        <CollectionNfts collection={collection} sortBy={sortBy} />\n      </Page>\n    </>\n  )\n}\n\nexport default Items\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"252px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps extends BoxProps {\n  options: OptionProps[]\n  onOptionChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onOptionChange, ...props }) => {\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\n\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\n    setIsOpen(!isOpen)\n    event.stopPropagation()\n  }\n\n  const onOptionClicked = (selectedIndex: number) => () => {\n    setSelectedOptionIndex(selectedIndex)\n    setIsOpen(false)\n\n    if (onOptionChange) {\n      onOptionChange(options[selectedIndex])\n    }\n  }\n\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setIsOpen(false)\n    }\n\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} {...props}>\n      <DropDownHeader onClick={toggling}>\n        <Text>{options[selectedOptionIndex].label}</Text>\n      </DropDownHeader>\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option, index) =>\n            index !== selectedOptionIndex ? (\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n"],"sourceRoot":""}